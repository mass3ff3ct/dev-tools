// Generated by CoffeeScript 1.8.0
var AppHelper, Future, appConfig, bundleConfigs, fs, normalizePathSeparator, path, prefixTypes, requirejs, requirejsConfig, storage, _;

_ = require('underscore');

fs = require('fs');

path = require('path');

normalizePathSeparator = require('../utils/fsNormalizePathSeparator');

Future = require('../utils/Future');

appConfig = require('../appConfig');

requirejs = require(process.cwd() + '/node_modules/requirejs');

requirejsConfig = require('../build/task/requirejs-config');

prefixTypes = {
  'cord': 'system',
  'cord-w': 'widget',
  'cord-t': 'translate',
  'cord-m': 'model',
  'vendor': 'vendor'
};

bundleConfigs = {};

storage = {};

AppHelper = (function() {
  function AppHelper() {
    this._bundles = [];
    this._cordPathHandlers = {};
    this._currentRequireContext = null;
  }

  AppHelper.prototype.initRequireJs = function(targetDir) {
    this.targetDir = targetDir;

    /*
    Метода настраивает requirejs и запускает инициализацию всех необходимых зависимостей
    @param String targetDir директория скомпилированного приложения
     */
    return appConfig.getBundles(this.targetDir).then((function(_this) {
      return function(bundles) {
        _this._applicationBundles = bundles;
        return requirejsConfig(_this.targetDir);
      };
    })(this)).then(function() {
      return Future.require('cord!requirejs/cord-w', 'cord!requirejs/cord-m', 'cord!requirejs/cord-t');
    }).then((function(_this) {
      return function(handlers) {
        _this._requireContext = requirejs.s.contexts._;
        return _this._cordPathHandlers = _.object(['cord-w', 'cord-m', 'cord-t'], handlers);
      };
    })(this));
  };

  AppHelper.prototype.fileExists = function(filePath) {
    try {
      return !fs.accessSync(filePath, fs.R_OK);
    } catch (_error) {
      return false;
    }
  };

  AppHelper.prototype.normalizePath = function(source, context) {

    /*
    Преобразует системный путь к файлу в относительный, с учетом расширений и некоторых особенностей ядра
    @param String path путь к файлу
    @return Object детальная информация о результате преобразования
     */
    var fullInfo, mapInfo, relativeFilePath;
    if (source.indexOf('.') === 0 && context) {
      source = normalizePathSeparator(path.join(context, source));
    }
    if (storage[source]) {
      return storage[source];
    }
    mapInfo = this._requireContext.makeModuleMap(source);
    if (!mapInfo.prefix && mapInfo.name.indexOf('//') !== -1) {
      mapInfo.prefix = 'cord-w';
      if (mapInfo.name.charAt(0) !== '/') {
        mapInfo.name = '/' + mapInfo.name;
      }
    }
    relativeFilePath = mapInfo.prefix && this._cordPathHandlers[mapInfo.prefix] ? (fullInfo = this._cordPathHandlers[mapInfo.prefix].getFullInfo(mapInfo.name), fullInfo.relativeFilePath) : this._requireContext.config.paths[mapInfo.name] ? (mapInfo.prefix = 'cord', this._requireContext.config.paths[mapInfo.name]) : (!mapInfo.prefix ? mapInfo.prefix = 'vendor' : void 0, mapInfo.name);
    if (this.getBundleByRelativePath(relativeFilePath)) {
      if (mapInfo.prefix === 'vendor') {
        mapInfo.prefix = 'core';
      }
      if (relativeFilePath.indexOf('bundles/') !== 0) {
        relativeFilePath = "bundles/" + relativeFilePath;
      }
    }
    if (relativeFilePath.charAt(0) === '/') {
      relativeFilePath = relativeFilePath.substr(0);
    }
    return storage[source] = {
      dest: relativeFilePath,
      type: prefixTypes[mapInfo.prefix]
    };
  };

  AppHelper.prototype.getBundles = function() {

    /*
    @return Array список доступных бандлов приложения
     */
    return this._applicationBundles;
  };

  AppHelper.prototype.getBundleConfig = function(bundle) {
    if (bundleConfigs[bundle]) {
      return bundleConfigs[bundle];
    } else {
      return null;
    }
  };

  AppHelper.prototype.setBundleConfig = function(bundle, config) {
    return bundleConfigs[bundle] = config;
  };

  AppHelper.prototype.getBundleByRelativePath = function(relativePath) {

    /*
    Проверяет входит ли в переданный путь какой либо бандл приложения и возвращает его.
    @param String relativePath относительный путь к файлу
    @return String|null
     */
    return _.find(this._applicationBundles, function(bundle) {
      return relativePath.indexOf(bundle) !== -1;
    });
  };

  return AppHelper;

})();

module.exports = new AppHelper();
