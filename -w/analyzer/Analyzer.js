// Generated by CoffeeScript 1.8.0
var Analyzer, Future, Scanner, ServiceManager, VendorManager, appHelper, fs, path, _;

_ = require('underscore');

fs = require('fs');

path = require('path');

Future = require('../utils/Future');

appHelper = require('./AppHelper');

ServiceManager = require('./ServiceManager');

VendorManager = require('./VendorManager');

Scanner = require('./Scanner');

Analyzer = (function() {
  function Analyzer(targetDir) {
    this.targetDir = targetDir;
    this.widgets = [];
  }

  Analyzer.prototype.init = function() {
    return appHelper.initRequireJs(this.targetDir).then(function() {
      var bundle, configFilePaths;
      configFilePaths = (function() {
        var _i, _len, _ref, _results;
        _ref = appHelper.getBundles();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          bundle = _ref[_i];
          _results.push("cord!/" + bundle + "/config");
        }
        return _results;
      })();
      return Future.require(configFilePaths);
    }).then((function(_this) {
      return function(configs) {
        var bundle, bundles, config, definition, id, index, widgets, _i, _len, _ref;
        bundles = appHelper.getBundles();
        widgets = [];
        for (index = _i = 0, _len = configs.length; _i < _len; index = ++_i) {
          config = configs[index];
          bundle = bundles[index];
          appHelper.setBundleConfig(bundle, config);
          _ref = config.routes;
          for (id in _ref) {
            definition = _ref[id];
            if (definition.widget && bundle !== 'cord/core') {
              widgets.push("cord-w!" + definition.widget + "@/" + bundle);
            }
          }
          if (config.services) {
            ServiceManager.addItems(_this._prepareDataForServiceManager(config.services));
          }
          if (config.requirejs) {
            VendorManager.addItems(_this._prepareDataForVendorManager(config.requirejs));
          }
        }
        return _this.widgets = _.uniq(widgets);
      };
    })(this));
  };

  Analyzer.prototype.all = function() {
    return this.init().then((function(_this) {
      return function() {
        var promises, widget;
        promises = (function() {
          var _i, _len, _ref, _results;
          _ref = this.widgets;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            widget = _ref[_i];
            _results.push(this._one(widget));
          }
          return _results;
        }).call(_this);
        return Future.all(promises);
      };
    })(this)).then((function(_this) {
      return function(dependenciesList) {
        var fileName, result;
        result = _.object(_this.widgets, dependenciesList);
        fileName = "" + _this.targetDir + "/analyze-result.json";
        return Future.call(fs.writeFile, fileName, JSON.stringify(result, null, 2)).then(function() {
          return console.log("create analyzed file " + fileName);
        });
      };
    })(this))["catch"](function(error) {
      return console.error(error, error.stack);
    });
  };

  Analyzer.prototype.one = function(name) {
    return this.init().then((function(_this) {
      return function() {
        return _this._one(name);
      };
    })(this)).then((function(_this) {
      return function(dependencies) {
        console.log("Dependencies for widget " + name + ":");
        return console.log(dependencies);
      };
    })(this))["catch"](function(error) {
      return console.error(error);
    });
  };

  Analyzer.prototype._one = function(name) {
    return Scanner.scan(name).then(function(scanned) {
      return scanned.dependencies;
    });
  };

  Analyzer.prototype._prepareDataForServiceManager = function(data) {
    if (data[':browser']) {
      data = _.extend(data, data[':browser']);
    }
    delete data[':browser'];
    delete data[':server'];
    return data;
  };

  Analyzer.prototype._prepareDataForVendorManager = function(data) {
    var destination, id, params, paths, result, shim, shortNames;
    paths = data.paths, shim = data.shim;
    shortNames = {};
    result = {};
    for (id in paths) {
      destination = paths[id];
      result[id] = {
        destination: destination,
        vendors: []
      };
      shortNames[path.basename(destination)] = id;
    }
    for (id in shim) {
      params = shim[id];
      if (!params.deps) {
        continue;
      }
      if (!result[id] && id.indexOf('vendor/') === 0) {
        result[id] = {
          destination: id
        };
      } else if (shortNames[id]) {
        id = shortNames[id];
      }
      result[id].vendors = params.deps || [];
    }
    return result;
  };

  return Analyzer;

})();

module.exports = Analyzer;
