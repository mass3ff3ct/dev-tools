// Generated by CoffeeScript 1.8.0
var Future, Scanner, ScannerStorage, ServiceManager, VendorManager, WidgetScanner, appHelper, applicationGlobal, findServiceContainerExpr, fs, path, storage, _, _define;

_ = require('underscore');

fs = require('fs');

path = require('path');

Future = require('../utils/Future');

appHelper = require('./AppHelper');

ServiceManager = require('./ServiceManager');

VendorManager = require('./VendorManager');

WidgetScanner = require('./WidgetScanner');

global.window = {
  addEventListener: function() {},
  location: {
    pathname: ''
  }
};

global.document = {
  createElement: function() {
    return {};
  },
  getElementsByTagName: function() {
    return [];
  }
};

global.navigator = {
  userAgent: ''
};

applicationGlobal = {
  config: {
    localFsMode: false,
    debug: {
      deferred: {},
      future: {
        longStackTrace: {},
        trackUnhandled: {}
      }
    }
  }
};

global.CORD_PROFILER_ENABLED = false;

global.CORD_IS_BROWSER = true;

findServiceContainerExpr = /\.container\.(?:get(?:Service)?)\(\'([a-zA-Z]+)\'\)/g;

_define = function(dependencies, callback) {
  if (!callback) {
    callback = dependencies;
    dependencies = [];
  }
  return [dependencies, callback];
};

ScannerStorage = (function() {
  function ScannerStorage() {
    this.data = {};
  }

  ScannerStorage.prototype.set = function(key, value, context) {
    if (!context) {
      return this.data[key] = value;
    } else {
      return this.data[key][context] = value;
    }
  };

  ScannerStorage.prototype.get = function(key, context) {
    var cache;
    if (!this.data[key]) {
      return false;
    }
    cache = this.data[key];
    if (context && cache[context]) {
      return cache[context];
    } else {
      return cache;
    }
  };

  return ScannerStorage;

})();

storage = new ScannerStorage();

Scanner = (function() {
  Scanner.scan = function(destination, currentDir, context) {
    var cache, destinationInfo, value;
    destinationInfo = appHelper.normalizePath(destination, currentDir);
    cache = storage.get(destinationInfo.dest, context);
    if (cache) {
      return cache;
    }
    value = (new Scanner(destinationInfo.dest, destinationInfo.type, context)).run();
    storage.set(destinationInfo.dest, value);
    return value;
  };

  function Scanner(destination, type, context) {
    this.destination = destination;
    this.type = type;
    this.context = context;
    if (!this.context) {
      this.context = this.destination;
    }
    this.currentDir = path.dirname(this.destination);
    this.dependencies = [];
    this.definition = null;
  }

  Scanner.prototype.run = function() {
    if (this.type === 'vendor') {
      return Future.resolved({
        dependencies: VendorManager.get(this.destination),
        definition: VendorManager.getDefinition(this.destination)
      });
    } else {
      return Future.call(fs.readFile, "" + appHelper.targetDir + "/public/" + this.destination + ".js", {
        encoding: 'utf8'
      }).then((function(_this) {
        return function(sourceContent) {
          var definitionCallback, dependencies, _ref;
          _this.sourceContent = sourceContent.replace('define(', 'return define(');
          _ref = (new Function('define, global', _this.sourceContent))(_define, applicationGlobal), dependencies = _ref[0], definitionCallback = _ref[1];
          return _this.resolveDependencies(dependencies, definitionCallback);
        };
      })(this)).then((function(_this) {
        return function() {
          return _.object(['dependencies', 'definition'], [_.uniq(_this.dependencies), _this.definition]);
        };
      })(this));
    }
  };

  Scanner.prototype.resolveDependencies = function(dependencies, definitionCallback) {
    var promises;
    promises = _.map(dependencies, (function(_this) {
      return function(dependency) {
        return Scanner.scan(dependency, _this.currentDir, _this.context);
      };
    })(this));
    return Future.all(promises).then((function(_this) {
      return function(scanned) {
        var definitionArguments, item, _i, _len;
        definitionArguments = [];
        for (_i = 0, _len = scanned.length; _i < _len; _i++) {
          item = scanned[_i];
          definitionArguments.push(item.definition);
          _this.dependencies = _this.dependencies.concat(item.dependencies);
        }
        _this.dependencies.push(_this.destination);
        _this.definition = definitionCallback.apply(null, definitionArguments);
        return _this.getServiceDependencies();
      };
    })(this)).then((function(_this) {
      return function() {
        storage.set(_this.destination, _.object(['dependencies', 'definition'], [_this.dependencies, _this.definition]), _this.context);
        if (_this.type === 'widget') {
          return (new WidgetScanner(_this)).run();
        }
      };
    })(this));
  };

  Scanner.prototype.selfScan = function(destination) {
    return Scanner.scan(destination, this.currentDir, this.context);
  };

  Scanner.prototype.getServiceDependencies = function() {
    var context, items, match, matched, promises, service, services, _i, _len, _ref;
    services = this.definition.inject || [];
    if (!_.isArray(services)) {
      services = _.values(services);
    }
    items = [];
    context = this.context;
    matched = ((function() {
      var _results;
      _results = [];
      while (match = findServiceContainerExpr.exec(this.sourceContent)) {
        _results.push(match[1]);
      }
      return _results;
    }).call(this));
    services = services.concat(matched);
    _ref = _.uniq(services);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      service = _ref[_i];
      items = items.concat(ServiceManager.get(service));
    }
    promises = _.map(_.uniq(items), function(dependency) {
      return Scanner.scan(dependency, void 0, context);
    });
    return Future.all(promises).then((function(_this) {
      return function(scanned) {
        var item, _j, _len1;
        for (_j = 0, _len1 = scanned.length; _j < _len1; _j++) {
          item = scanned[_j];
          _this.dependencies = _this.dependencies.concat(item.dependencies);
        }
      };
    })(this));
  };

  return Scanner;

})();

module.exports = Scanner;
