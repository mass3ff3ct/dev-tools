// Generated by CoffeeScript 1.8.0
var Future, WidgetScanner, appHelper, findSwitcherVariable, findWidgetExpr, fs, path, _;

_ = require('underscore');

fs = require('fs');

path = require('path');

Future = require('../utils/Future');

appHelper = require('./AppHelper');

findWidgetExpr = /"type":\s?"([^"]+)"/g;

findSwitcherVariable = /\"widget\":\"\^?([a-zA-Z]+)\"/;

WidgetScanner = (function() {
  function WidgetScanner(scanner) {
    this.scanner = scanner;
    this.widgetName = path.basename(this.scanner.destination);
  }

  WidgetScanner.prototype.run = function() {
    return Future.all([this.getBehaviourDependencies(), this.getTemplateDependencies()]);
  };

  WidgetScanner.prototype.getTemplateDependencies = function() {
    var templateFile, templateName;
    templateName = this.widgetName.charAt(0).toLowerCase() + this.widgetName.substr(1);
    templateFile = "" + appHelper.targetDir + "/public/" + this.scanner.currentDir + "/" + templateName + ".html.js";
    if (appHelper.fileExists(templateFile)) {
      return Future.call(fs.readFile, templateFile, {
        encoding: 'utf8'
      }).then((function(_this) {
        return function(templateContent) {
          var currentBundle, match, matched, promises, switchedWidgets, switcherVariable, tmp;
          currentBundle = appHelper.getBundleByRelativePath(_this.scanner.destination);
          switchedWidgets = [];
          matched = (function() {
            var _results;
            _results = [];
            while (match = findWidgetExpr.exec(templateContent)) {
              if (match[1] === 'Switcher') {
                tmp = templateContent.substring(match.index);
                switcherVariable = findSwitcherVariable.exec(tmp.substring(0, tmp.indexOf('}')));
                switchedWidgets = switchedWidgets.concat(this._getSwitcherWidgets(switcherVariable[1], currentBundle));
              }
              _results.push(match[1]);
            }
            return _results;
          }).call(_this);
          matched = matched.concat(switchedWidgets);
          promises = _.map(_.uniq(matched), function(match) {
            return _this.scanner.selfScan("cord-w!" + match + "@/" + currentBundle);
          });
          return Future.all(promises);
        };
      })(this)).then((function(_this) {
        return function(scanned) {
          var dependencies, item, _i, _len;
          dependencies = [];
          for (_i = 0, _len = scanned.length; _i < _len; _i++) {
            item = scanned[_i];
            dependencies = dependencies.concat(item.dependencies);
          }
          _this.scanner.dependencies = _this.scanner.dependencies.concat(dependencies);
        };
      })(this));
    }
  };

  WidgetScanner.prototype.getBehaviourDependencies = function() {
    var behaviourFile;
    behaviourFile = "" + appHelper.targetDir + "/public/" + this.scanner.currentDir + "/" + this.widgetName + "Behaviour.js";
    if (this.scanner.definition.prototype.behaviourClass !== false && appHelper.fileExists(behaviourFile)) {
      return this.scanner.selfScan("cord!" + this.scanner.currentDir + "/" + this.widgetName + "Behaviour").then((function(_this) {
        return function(scanned) {
          _this.scanner.dependencies = _this.scanner.dependencies.concat(scanned.dependencies);
        };
      })(this));
    }
  };

  WidgetScanner.prototype._getSwitcherWidgets = function(variableName, bundle) {
    var config, definition, id, match, params, reg, switched, widgetInfo, widgetPath, _ref;
    reg = new RegExp("\\'?" + variableName + "\\'?\\:\\s?\\'([a-zA-z\\/]+)\\'", 'g');
    switched = ((function() {
      var _results;
      _results = [];
      while ((match = reg.exec(this.scanner.sourceContent))) {
        _results.push(match[1]);
      }
      return _results;
    }).call(this));
    if (switched.length === 0) {
      config = appHelper.getBundleConfig(bundle);
      _ref = config.routes;
      for (id in _ref) {
        definition = _ref[id];
        widgetInfo = appHelper.normalizePath("" + definition.widget + "@/" + bundle);
        params = definition.params || {};
        if (widgetInfo.dest === this.scanner.context && (widgetPath = params[variableName] || params.contentWidget)) {
          switched.push(widgetPath);
        }
      }
    }
    return switched;
  };

  return WidgetScanner;

})();

module.exports = WidgetScanner;
