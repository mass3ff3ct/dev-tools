// Generated by CoffeeScript 1.8.0
var VendorManager, godObject, storage, _;

_ = require('underscore');

godObject = {
  prototype: {},
  makeBase: function() {}
};

storage = {};

VendorManager = (function() {
  function VendorManager(manager) {
    this.manager = manager;
    this.data = {};
  }

  VendorManager.prototype.addItems = function(items) {
    var definition, id, _results;
    _results = [];
    for (id in items) {
      definition = items[id];
      _results.push(this.add(id, definition));
    }
    return _results;
  };

  VendorManager.prototype.add = function(id, definition) {
    definition.isRemote = definition.destination.indexOf('//') === 0;
    return this.data[id] = definition;
  };

  VendorManager.prototype.get = function(id) {
    var dependencies, vendor, vendorId, _i, _len, _ref;
    vendor = this.data[id];
    if (!vendor || vendor.isRemote) {
      return [id];
    }
    if (storage[id]) {
      return storage[id];
    }
    dependencies = [];
    dependencies = [vendor.destination];
    _ref = vendor.vendors;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      vendorId = _ref[_i];
      dependencies = dependencies.concat(this.get(vendorId));
    }
    return storage[id] = dependencies;
  };

  VendorManager.prototype.getDefinition = function(id) {
    switch (id) {
      case 'underscore':
      case 'lodash':
        return _;
      case 'monologue':
      case 'dustjs-helpers':
        return godObject;
      default:
        return {};
    }
  };

  return VendorManager;

})();

module.exports = new VendorManager;
