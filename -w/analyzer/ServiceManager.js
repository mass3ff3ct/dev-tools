// Generated by CoffeeScript 1.8.0
var ServiceManager, emptyCallback, getFunctionBody, requireEmulate, storage, _;

_ = require('underscore');

emptyCallback = function() {};

requireEmulate = function(deps) {
  return deps;
};

getFunctionBody = function(func) {
  var text;
  text = func.toString();
  return text.substring(text.indexOf("{") + 1, text.lastIndexOf("}"));
};

storage = {};

ServiceManager = (function() {
  function ServiceManager() {
    this.data = {
      serviceContainer: {
        dependencies: ['cord!ServiceContainer'],
        services: []
      },
      fallback: {
        dependencies: ['cord!init/browserInit'],
        services: []
      },
      router: {
        dependencies: ['cord!router/clientSideRouter'],
        services: []
      },
      config: {
        dependencies: [],
        services: []
      },
      serverRequest: {
        dependencies: [],
        services: []
      }
    };
  }

  ServiceManager.prototype.addItems = function(items) {
    var definition, id, _results;
    _results = [];
    for (id in items) {
      definition = items[id];
      _results.push(this.add(id, definition));
    }
    return _results;
  };

  ServiceManager.prototype.add = function(id, definition) {
    return this.data[id] = {
      services: definition.deps || [],
      dependencies: this._findDependencies(id, definition)
    };
  };

  ServiceManager.prototype.get = function(id) {
    var dependencies, service, serviceId, _i, _len, _ref;
    service = this.data[id];
    if (!service) {
      console.log("Used an undefined service " + id);
      return [];
    }
    if (storage[id]) {
      return storage[id];
    }
    dependencies = this.data[id].dependencies;
    _ref = service.services;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      serviceId = _ref[_i];
      dependencies = dependencies.concat(this.get(serviceId));
    }
    return storage[id] = dependencies;
  };

  ServiceManager.prototype._findDependencies = function(name, definition) {
    var callback, dependencies, error, factory;
    factory = typeof definition === 'function' ? definition : definition.factory;
    callback = new Function('get, done, require, CORD_IS_BROWSER', getFunctionBody(factory));
    dependencies = [];
    try {
      dependencies = callback(emptyCallback, emptyCallback, requireEmulate, true) || [];
    } catch (_error) {
      error = _error;
      console.log("Failed initialize service callback. Service: " + name + ", error: " + error);
    }
    return dependencies;
  };

  return ServiceManager;

})();

module.exports = new ServiceManager;
