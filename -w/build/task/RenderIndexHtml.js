// Generated by CoffeeScript 1.8.0
var BuildTask, Future, RenderIndexHtml, fs, path, pathToCore, requirejs, requirejsConfig,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

path = require('path');

requirejs = require(process.cwd() + '/node_modules/requirejs');

Future = require('../../utils/Future');

BuildTask = require('./BuildTask');

requirejsConfig = require('./requirejs-config');

pathToCore = 'bundles/cord/core';

RenderIndexHtml = (function(_super) {
  __extends(RenderIndexHtml, _super);

  function RenderIndexHtml() {
    return RenderIndexHtml.__super__.constructor.apply(this, arguments);
  }


  /*
  Renders and saves given widget (came from -I --index CLI option) as main index.html page.
  This is need mainly for mobile apps (phonegap) working in SPA mode.
   */

  RenderIndexHtml.prototype.run = function() {
    var browserInitPromise, config, dst, nodeInit;
    dst = "" + this.params.targetDir + "/public/index.html";
    nodeInit = require(path.join(this.params.targetDir, 'public', pathToCore, 'init/nodeInit'));
    config = nodeInit.loadConfig(this.params.info.configName);
    global.appConfig = config;
    global.config = config.node;
    global.CORD_PROFILER_ENABLED = config.node.debug.profiler.enable;
    browserInitPromise = Future.call(fs.readFile, path.join(this.params.targetDir, 'public/assets/z/browser-init.id'), 'utf8').then(function(id) {
      global.config.browserInitScriptId = id;
    })["catch"](function() {});
    return Future.all([browserInitPromise, requirejsConfig(this.params.targetDir)]).then(function() {
      return Future.require('cord!AppConfigLoader', 'cord!utils/DomInfo', 'cord!ServiceContainer', 'cord!router/serverSideRouter');
    }).spread((function(_this) {
      return function(AppConfigLoader, DomInfo, ServiceContainer, ServerSideRouter) {
        var serviceContainer;
        config = ServerSideRouter.constructor.replaceConfigVarsByHost(config, '127.0.0.1', 'http');
        global.appConfig = config;
        global.config = config.node;
        serviceContainer = new ServiceContainer;
        serviceContainer.set('serviceContainer', serviceContainer);
        serviceContainer.set('config', global.config);
        serviceContainer.set('appConfig', global.appConfig);
        return AppConfigLoader.ready().then(function(appConfig) {
          var info, serviceName, _fn, _ref;
          appConfig.services.cookie = {
            deps: ['serviceContainer'],
            factory: function(get, done) {
              return requirejs(['cord!/cord/core/cookie/LocalCookie'], (function(_this) {
                return function(Cookie) {
                  return done(null, new Cookie(get('serviceContainer')));
                };
              })(this));
            }
          };
          _ref = appConfig.services;
          _fn = function(info) {
            return serviceContainer.def(serviceName, info.deps, function(get, done) {
              return info.factory.call(serviceContainer, get, done);
            });
          };
          for (serviceName in _ref) {
            info = _ref[serviceName];
            _fn(info);
          }
          return serviceContainer.getService('widgetRepo').then(function(widgetRepo) {
            return widgetRepo.createWidget(_this.params.file).then(function(rootWidget) {
              rootWidget._isExtended = true;
              widgetRepo.setRootWidget(rootWidget);
              return rootWidget.show({}, DomInfo.fake());
            });
          });
        });
      };
    })(this)).then(function(out) {
      return Future.call(fs.writeFile, dst, out);
    }).link(this.readyPromise);
  };

  return RenderIndexHtml;

})(BuildTask);

module.exports = RenderIndexHtml;
